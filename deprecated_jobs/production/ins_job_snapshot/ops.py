import os
import gzip
import pickle

from dagster import (
    op,
    job,
    fs_io_manager,
    make_values_resource,
    Field,
    Out,
    DynamicOut,
    DynamicOutput
)

# project import
from ..utils.io_manager_path import get_io_manager_path
# module import
from ..utils.messages import send_dwh_alert_slack_message
from ..utils.prod_job_config import retry_policy, sapshot_job_config
from ..utils.prod_sqlinstances import SqlInstanceList, map_country_code_to_id, all_countries_list
from ..utils.prod_db_operations import copy_from_prod_to_rpl
from ..utils.utils import delete_pkl_files



TABLE_NAME = "snap_job"
SCHEMA = "an"
PATH_TO_DATA = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data")


@op(out=Out(str))
def snap_job_get_sql_query(context) -> str:
    '''Get sql query from .sql file.

    Args:
        context: The context object.

    Returns:
        str: The SQL query.

    '''
    path_to_query = os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.join("sql", f"{TABLE_NAME}.sql"))
    with open(path_to_query, 'r') as query:
        q = query.read()
    context.log.info('Loaded SQL query')
    return q


@op(out=DynamicOut(), 
    required_resource_keys={'globals'})
def snap_job_get_sqlinstance(context, query):
    '''
    Loop over prod sql instances and create output dictionary with data to start on a separate instance.

    Args:
        context: The context object.
        query: The SQL query.

    Output:
        A generator that yields a DynamicOutput object containing the SQL instance, country database, country ID, query, and date range.

    '''
    # delete previously stored data
    delete_pkl_files(context, PATH_TO_DATA)

    launch_countries = context.resources.globals["reload_countries"]

    context.log.info(f'Selected countries: {launch_countries}')
    
    # iterate over sql instances
    for sql_instance in SqlInstanceList:
        for country_db in sql_instance['CountryList']:
            # filter if custom countries
            for launch_country in launch_countries:
                if str(country_db).lower() in str(launch_country).strip('_').lower():
                    # add country_id
                    for country_name, country_id in map_country_code_to_id.items():
                        if str(launch_country).strip('_').lower() in country_name:
                            # 'to_sqlcode' > will pass any value to .sql file which starts with it
                            yield DynamicOutput(
                                value={'sql_instance': sql_instance, 
                                       'country_db': country_db, 
                                       'country_id': country_id, 
                                       'query': query,
                                       },
                                mapping_key='Job_'+country_db
                            )


@op(retry_policy=retry_policy)
def snap_job_query_on_db(context, sql_instance_country_query: dict):
    '''
    Launch query on each instance.

    Args:
        context: The context object.
        sql_instance_country_query: A dictionary containing the SQL instance and country query.

    Returns:
        A list of file paths generated by the query.

    '''
    copy_from_prod_to_rpl(context, PATH_TO_DATA, TABLE_NAME, SCHEMA, sql_instance_country_query)


@job(config=sapshot_job_config,
     resource_defs={"globals": make_values_resource(reload_countries=Field(list, default_value=all_countries_list)
                                                    ),
                    "io_manager": fs_io_manager.configured({"base_dir": f"{get_io_manager_path()}"})},
    name='prd__'+TABLE_NAME,
    description=f'{SCHEMA}.{TABLE_NAME}')
def snap_job_job():
    """
    This function executes the snap_job job.

    It retrieves a SQL query using the snap_job_get_sql_query function,
    gets SQL instances using the snap_job_get_sqlinstance function,
    and maps the snap_job_query_on_db function to each instance.
    """
    query = snap_job_get_sql_query()
    instances = snap_job_get_sqlinstance(query)
    instances.map(snap_job_query_on_db)